// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/sensu/core/v2/pipeline_workflow.proto

package v2

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PipelineWorkflow represents a workflow of filters, mutator, & handler to use
// in a pipeline.
//sensu:nogen
type PipelineWorkflow struct {
	// Name is a descriptive name of the pipeline workflow.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"name" yaml: "name`
	// Filters contains one or more references to a resource to use as an event
	// filter.
	Filters []*ResourceReference `protobuf:"bytes,2,rep,name=Filters,proto3" json:"filters,omitempty" yaml: "filters,omitempty"`
	// Mutator contains a reference to a resource to use as an event mutator.
	Mutator *ResourceReference `protobuf:"bytes,3,opt,name=Mutator,proto3" json:"mutator,omitempty" yaml: "mutator,omitempty"`
	// Handler contains a reference to a resource to use as an event handler.
	Handler              *ResourceReference `protobuf:"bytes,4,opt,name=Handler,proto3" json:"handler" yaml: "handler]"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PipelineWorkflow) Reset()         { *m = PipelineWorkflow{} }
func (m *PipelineWorkflow) String() string { return proto.CompactTextString(m) }
func (*PipelineWorkflow) ProtoMessage()    {}
func (*PipelineWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_10fe3e5d2693196a, []int{0}
}
func (m *PipelineWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineWorkflow.Merge(m, src)
}
func (m *PipelineWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *PipelineWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineWorkflow proto.InternalMessageInfo

func (m *PipelineWorkflow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PipelineWorkflow) GetFilters() []*ResourceReference {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *PipelineWorkflow) GetMutator() *ResourceReference {
	if m != nil {
		return m.Mutator
	}
	return nil
}

func (m *PipelineWorkflow) GetHandler() *ResourceReference {
	if m != nil {
		return m.Handler
	}
	return nil
}

func init() {
	proto.RegisterType((*PipelineWorkflow)(nil), "sensu.core.v2.PipelineWorkflow")
}

func init() {
	proto.RegisterFile("github.com/sensu/core/v2/pipeline_workflow.proto", fileDescriptor_10fe3e5d2693196a)
}

var fileDescriptor_10fe3e5d2693196a = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x4e, 0xcd, 0x2b, 0x2e, 0xd5, 0x4f, 0xce, 0x2f,
	0x4a, 0xd5, 0x2f, 0x33, 0xd2, 0x2f, 0xc8, 0x2c, 0x48, 0xcd, 0xc9, 0xcc, 0x4b, 0x8d, 0x2f, 0xcf,
	0x2f, 0xca, 0x4e, 0xcb, 0xc9, 0x2f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x05, 0x2b,
	0xd3, 0x03, 0x29, 0xd3, 0x2b, 0x33, 0x92, 0x32, 0x41, 0x32, 0x20, 0x3d, 0x3f, 0x3d, 0x5f, 0x1f,
	0xac, 0x2a, 0xa9, 0x34, 0xcd, 0xa1, 0xcc, 0x50, 0xcf, 0x58, 0xcf, 0x08, 0x2c, 0x08, 0x16, 0x03,
	0xb3, 0x20, 0x86, 0x48, 0x19, 0xe2, 0xb4, 0xb6, 0x28, 0xb5, 0x38, 0xbf, 0xb4, 0x28, 0x39, 0x35,
	0xbe, 0x28, 0x35, 0x2d, 0xb5, 0x28, 0x35, 0x2f, 0x39, 0x15, 0xa2, 0x45, 0xe9, 0x0f, 0x13, 0x97,
	0x40, 0x00, 0xd4, 0x4d, 0xe1, 0x50, 0x27, 0x09, 0x69, 0x73, 0xb1, 0xf8, 0x25, 0xe6, 0xa6, 0x4a,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x3a, 0x89, 0xbf, 0xba, 0x27, 0xcf, 0x92, 0x97, 0x98, 0x9b, 0xfa,
	0xe9, 0x9e, 0x3c, 0x77, 0x65, 0x62, 0x6e, 0x8e, 0x95, 0x82, 0x12, 0x88, 0x1b, 0x04, 0x56, 0x24,
	0x94, 0xc7, 0xc5, 0xee, 0x96, 0x99, 0x53, 0x92, 0x5a, 0x54, 0x2c, 0xc1, 0xa4, 0xc0, 0xac, 0xc1,
	0x6d, 0xa4, 0xa0, 0x87, 0xe2, 0x17, 0xbd, 0x20, 0xa8, 0xdd, 0x41, 0x30, 0xab, 0x9d, 0x8c, 0x5e,
	0xdd, 0x93, 0x17, 0x4c, 0x83, 0x68, 0xd2, 0xc9, 0xcf, 0xcd, 0x2c, 0x49, 0xcd, 0x2d, 0x28, 0xa9,
	0xfc, 0x74, 0x4f, 0x5e, 0x12, 0x6a, 0x3c, 0x86, 0x9c, 0x52, 0x10, 0xcc, 0x12, 0x90, 0x7d, 0xbe,
	0xa5, 0x25, 0x89, 0x25, 0xf9, 0x45, 0x12, 0xcc, 0x0a, 0x8c, 0xc4, 0xdb, 0x97, 0x0b, 0xd1, 0x84,
	0xd5, 0x3e, 0x0c, 0x39, 0xa5, 0x20, 0x98, 0x25, 0x42, 0xd1, 0x5c, 0xec, 0x1e, 0x89, 0x79, 0x29,
	0x39, 0xa9, 0x45, 0x12, 0x2c, 0x44, 0xda, 0x27, 0xff, 0xea, 0x9e, 0x3c, 0x7b, 0x06, 0x44, 0xd3,
	0xa7, 0x7b, 0xf2, 0x02, 0x50, 0x5b, 0xa0, 0x22, 0xb1, 0x4a, 0x41, 0x30, 0x13, 0x9d, 0x14, 0x7e,
	0x3c, 0x94, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0x71, 0xc7, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18,
	0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xa6, 0x32,
	0xa3, 0x24, 0x36, 0x70, 0x3c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xec, 0xb5, 0x94, 0xf5,
	0x53, 0x02, 0x00, 0x00,
}

func (this *PipelineWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PipelineWorkflow)
	if !ok {
		that2, ok := that.(PipelineWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Filters) != len(that1.Filters) {
		return false
	}
	for i := range this.Filters {
		if !this.Filters[i].Equal(that1.Filters[i]) {
			return false
		}
	}
	if !this.Mutator.Equal(that1.Mutator) {
		return false
	}
	if !this.Handler.Equal(that1.Handler) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *PipelineWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Handler != nil {
		{
			size, err := m.Handler.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipelineWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Mutator != nil {
		{
			size, err := m.Mutator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipelineWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Filters) > 0 {
		for iNdEx := len(m.Filters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Filters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipelineWorkflow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPipelineWorkflow(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPipelineWorkflow(dAtA []byte, offset int, v uint64) int {
	offset -= sovPipelineWorkflow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPipelineWorkflow(r randyPipelineWorkflow, easy bool) *PipelineWorkflow {
	this := &PipelineWorkflow{}
	this.Name = string(randStringPipelineWorkflow(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Filters = make([]*ResourceReference, v1)
		for i := 0; i < v1; i++ {
			this.Filters[i] = NewPopulatedResourceReference(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Mutator = NewPopulatedResourceReference(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Handler = NewPopulatedResourceReference(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPipelineWorkflow(r, 5)
	}
	return this
}

type randyPipelineWorkflow interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePipelineWorkflow(r randyPipelineWorkflow) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPipelineWorkflow(r randyPipelineWorkflow) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RunePipelineWorkflow(r)
	}
	return string(tmps)
}
func randUnrecognizedPipelineWorkflow(r randyPipelineWorkflow, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPipelineWorkflow(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPipelineWorkflow(dAtA []byte, r randyPipelineWorkflow, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePipelineWorkflow(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulatePipelineWorkflow(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulatePipelineWorkflow(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePipelineWorkflow(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePipelineWorkflow(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePipelineWorkflow(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePipelineWorkflow(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PipelineWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPipelineWorkflow(uint64(l))
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovPipelineWorkflow(uint64(l))
		}
	}
	if m.Mutator != nil {
		l = m.Mutator.Size()
		n += 1 + l + sovPipelineWorkflow(uint64(l))
	}
	if m.Handler != nil {
		l = m.Handler.Size()
		n += 1 + l + sovPipelineWorkflow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPipelineWorkflow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPipelineWorkflow(x uint64) (n int) {
	return sovPipelineWorkflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PipelineWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &ResourceReference{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mutator == nil {
				m.Mutator = &ResourceReference{}
			}
			if err := m.Mutator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Handler == nil {
				m.Handler = &ResourceReference{}
			}
			if err := m.Handler.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipelineWorkflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipelineWorkflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipelineWorkflow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPipelineWorkflow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPipelineWorkflow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPipelineWorkflow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipelineWorkflow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPipelineWorkflow = fmt.Errorf("proto: unexpected end of group")
)
