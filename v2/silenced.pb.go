// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/sensu/core/v2/silenced.proto

package v2

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Silenced is the representation of a silence entry.
type Silenced struct {
	// Metadata contains the name, namespace, labels and annotations of the
	// silenced
	ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	// Expire is the number of seconds the entry will live
	Expire int64 `protobuf:"varint,2,opt,name=expire,proto3" json:"expire"`
	// ExpireOnResolve defaults to false, clears the entry on resolution when
	// set to true
	ExpireOnResolve bool `protobuf:"varint,3,opt,name=expire_on_resolve,json=expireOnResolve,proto3" json:"expire_on_resolve"`
	// Creator is the author of the silenced entry
	Creator string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	// Check is the name of the check event to be silenced.
	Check string `protobuf:"bytes,5,opt,name=check,proto3" json:"check,omitempty"`
	// Reason is used to provide context to the entry
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	// Subscription is the name of the subscription to which the entry applies.
	Subscription string `protobuf:"bytes,7,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// Begin is a timestamp at which the silenced entry takes effect.
	Begin int64 `protobuf:"varint,10,opt,name=begin,proto3" json:"begin"`
	// ExpireAt is a timestamp at which the silenced entry will expire.
	ExpireAt int64 `protobuf:"varint,11,opt,name=expire_at,json=expireAt,proto3" json:"expire_at"`
	// Default Expiry time is the number of seconds the entry will live if expire_at is not set
	DefaultSilencedExpiry int64 `protobuf:"varint,12,opt,name=default_silenced_expiry,json=defaultSilencedExpiry,proto3" json:"default_silenced_expiry"`
	// Maximum Expiry allowed is the number of seconds expiry is allowed
	MaxSilencedExpiryAllowed int64    `protobuf:"varint,13,opt,name=max_silenced_expiry_allowed,json=maxSilencedExpiryAllowed,proto3" json:"max_silenced_expiry_allowed"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *Silenced) Reset()         { *m = Silenced{} }
func (m *Silenced) String() string { return proto.CompactTextString(m) }
func (*Silenced) ProtoMessage()    {}
func (*Silenced) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ce65f7b157e0d5e, []int{0}
}
func (m *Silenced) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Silenced) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Silenced.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Silenced) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Silenced.Merge(m, src)
}
func (m *Silenced) XXX_Size() int {
	return m.Size()
}
func (m *Silenced) XXX_DiscardUnknown() {
	xxx_messageInfo_Silenced.DiscardUnknown(m)
}

var xxx_messageInfo_Silenced proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Silenced)(nil), "sensu.core.v2.Silenced")
}

func init() {
	proto.RegisterFile("github.com/sensu/core/v2/silenced.proto", fileDescriptor_5ce65f7b157e0d5e)
}

var fileDescriptor_5ce65f7b157e0d5e = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd3, 0x30,
	0x1c, 0xc7, 0xeb, 0xad, 0xed, 0x5a, 0x6f, 0x05, 0x61, 0x81, 0xf0, 0x06, 0x4a, 0x22, 0x26, 0x41,
	0x84, 0x50, 0x22, 0x32, 0x4e, 0x9c, 0x58, 0xa4, 0x1d, 0xd1, 0x24, 0x23, 0x84, 0xc4, 0x25, 0x72,
	0xd2, 0xdf, 0xba, 0x40, 0x12, 0x57, 0x89, 0x13, 0xba, 0x37, 0xe0, 0x11, 0x38, 0xee, 0xb8, 0x47,
	0xe0, 0x11, 0x7a, 0xdc, 0x13, 0x44, 0x10, 0x6e, 0x7d, 0x02, 0x8e, 0xa8, 0x76, 0x0a, 0x2d, 0x68,
	0x9c, 0xfc, 0xcb, 0xe7, 0xfb, 0xc7, 0x71, 0x62, 0xfc, 0x64, 0x12, 0xcb, 0xf3, 0x32, 0x74, 0x22,
	0x91, 0xba, 0x05, 0x64, 0x45, 0xe9, 0x46, 0x22, 0x07, 0xb7, 0xf2, 0xdc, 0x22, 0x4e, 0x20, 0x8b,
	0x60, 0xec, 0x4c, 0x73, 0x21, 0x05, 0x19, 0x29, 0xd5, 0x59, 0xaa, 0x4e, 0xe5, 0x1d, 0xbc, 0x58,
	0xcb, 0x4d, 0xc4, 0x44, 0xb8, 0xca, 0x15, 0x96, 0x67, 0xaf, 0xaa, 0xe7, 0xce, 0x91, 0xe3, 0x29,
	0xa8, 0x98, 0x9a, 0x74, 0xc9, 0xc1, 0xe1, 0x8d, 0xbb, 0xa5, 0x20, 0xb9, 0x36, 0x3d, 0x6a, 0xba,
	0x78, 0xf0, 0xa6, 0xdd, 0x9c, 0xbc, 0xc5, 0x83, 0xa5, 0x34, 0xe6, 0x92, 0x53, 0x64, 0x21, 0x7b,
	0xd7, 0xdb, 0x77, 0x36, 0xde, 0xc4, 0x39, 0x0d, 0x3f, 0x40, 0x24, 0x5f, 0x83, 0xe4, 0xbe, 0x31,
	0xaf, 0xcd, 0xce, 0x75, 0x6d, 0xa2, 0x45, 0x6d, 0x92, 0x55, 0xec, 0x99, 0x48, 0x63, 0x09, 0xe9,
	0x54, 0x5e, 0xb0, 0xdf, 0x55, 0xe4, 0x31, 0xee, 0xc3, 0x6c, 0x1a, 0xe7, 0x40, 0xb7, 0x2c, 0x64,
	0x6f, 0xfb, 0xb7, 0xe6, 0x3a, 0xd5, 0x52, 0xd6, 0xae, 0xe4, 0x04, 0xdf, 0xd1, 0x53, 0x20, 0xb2,
	0x20, 0x87, 0x42, 0x24, 0x15, 0xd0, 0x6d, 0x0b, 0xd9, 0x03, 0x7f, 0xbf, 0x8d, 0xfc, 0x6b, 0x60,
	0xb7, 0x35, 0x3a, 0xcd, 0x98, 0x06, 0xc4, 0xc0, 0x3b, 0x51, 0x0e, 0x5c, 0x8a, 0x9c, 0x76, 0x2d,
	0x64, 0x0f, 0xfd, 0xee, 0x32, 0xcc, 0x56, 0x90, 0xdc, 0xc5, 0xbd, 0xe8, 0x1c, 0xa2, 0x8f, 0xb4,
	0xb7, 0x54, 0x99, 0x7e, 0x20, 0x0f, 0x71, 0x3f, 0x07, 0x5e, 0x88, 0x8c, 0xf6, 0xd7, 0x42, 0x2d,
	0x23, 0x36, 0xde, 0x2b, 0xca, 0xb0, 0x88, 0xf2, 0x78, 0x2a, 0x63, 0x91, 0xd1, 0x9d, 0x35, 0xcf,
	0x86, 0x42, 0x4c, 0xdc, 0x0b, 0x61, 0x12, 0x67, 0x14, 0xab, 0xb3, 0x0e, 0x17, 0xb5, 0xa9, 0x01,
	0xd3, 0x0b, 0x79, 0x8a, 0x87, 0xed, 0x21, 0xb8, 0xa4, 0xbb, 0xca, 0x34, 0x5a, 0xd4, 0xe6, 0x1f,
	0xc8, 0x06, 0x7a, 0x3c, 0x96, 0xe4, 0x1d, 0xbe, 0x3f, 0x86, 0x33, 0x5e, 0x26, 0x32, 0x58, 0xdd,
	0x90, 0x40, 0x89, 0x17, 0x74, 0x4f, 0x25, 0xcd, 0xf6, 0xbb, 0xdc, 0x64, 0x63, 0xf7, 0x5a, 0x61,
	0xf5, 0x8f, 0x4f, 0x14, 0x26, 0x21, 0x7e, 0x90, 0xf2, 0xd9, 0xdf, 0xee, 0x80, 0x27, 0x89, 0xf8,
	0x04, 0x63, 0x3a, 0x52, 0xe5, 0x87, 0x6d, 0xf9, 0xff, 0xac, 0x8c, 0xa6, 0x7c, 0xb6, 0x59, 0x7e,
	0xac, 0x95, 0x97, 0x83, 0xcf, 0x97, 0x66, 0xe7, 0xea, 0xd2, 0x44, 0xbe, 0xf5, 0xf3, 0xbb, 0x81,
	0xae, 0x1a, 0x03, 0x7d, 0x6d, 0x0c, 0x34, 0x6f, 0x0c, 0x74, 0xdd, 0x18, 0xe8, 0x5b, 0x63, 0xa0,
	0x2f, 0x3f, 0x8c, 0xce, 0xfb, 0xad, 0xca, 0x0b, 0xfb, 0xea, 0x36, 0x1e, 0xfd, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0xa7, 0x16, 0x29, 0x6b, 0x22, 0x03, 0x00, 0x00,
}

func (m *Silenced) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Silenced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Silenced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxSilencedExpiryAllowed != 0 {
		i = encodeVarintSilenced(dAtA, i, uint64(m.MaxSilencedExpiryAllowed))
		i--
		dAtA[i] = 0x68
	}
	if m.DefaultSilencedExpiry != 0 {
		i = encodeVarintSilenced(dAtA, i, uint64(m.DefaultSilencedExpiry))
		i--
		dAtA[i] = 0x60
	}
	if m.ExpireAt != 0 {
		i = encodeVarintSilenced(dAtA, i, uint64(m.ExpireAt))
		i--
		dAtA[i] = 0x58
	}
	if m.Begin != 0 {
		i = encodeVarintSilenced(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Subscription) > 0 {
		i -= len(m.Subscription)
		copy(dAtA[i:], m.Subscription)
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Subscription)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Check) > 0 {
		i -= len(m.Check)
		copy(dAtA[i:], m.Check)
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Check)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.ExpireOnResolve {
		i--
		if m.ExpireOnResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Expire != 0 {
		i = encodeVarintSilenced(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSilenced(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSilenced(dAtA []byte, offset int, v uint64) int {
	offset -= sovSilenced(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedSilenced(r randySilenced, easy bool) *Silenced {
	this := &Silenced{}
	v1 := NewPopulatedObjectMeta(r, easy)
	this.ObjectMeta = *v1
	this.Expire = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Expire *= -1
	}
	this.ExpireOnResolve = bool(bool(r.Intn(2) == 0))
	this.Creator = string(randStringSilenced(r))
	this.Check = string(randStringSilenced(r))
	this.Reason = string(randStringSilenced(r))
	this.Subscription = string(randStringSilenced(r))
	this.Begin = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Begin *= -1
	}
	this.ExpireAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ExpireAt *= -1
	}
	this.DefaultSilencedExpiry = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.DefaultSilencedExpiry *= -1
	}
	this.MaxSilencedExpiryAllowed = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxSilencedExpiryAllowed *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSilenced(r, 14)
	}
	return this
}

type randySilenced interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSilenced(r randySilenced) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSilenced(r randySilenced) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneSilenced(r)
	}
	return string(tmps)
}
func randUnrecognizedSilenced(r randySilenced, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSilenced(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSilenced(dAtA []byte, r randySilenced, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSilenced(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *Silenced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Silenced)
	if !ok {
		that2, ok := that.(Silenced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectMeta.Equal(&that1.ObjectMeta) {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.ExpireOnResolve != that1.ExpireOnResolve {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.Check != that1.Check {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Subscription != that1.Subscription {
		return false
	}
	if this.Begin != that1.Begin {
		return false
	}
	if this.ExpireAt != that1.ExpireAt {
		return false
	}
	if this.DefaultSilencedExpiry != that1.DefaultSilencedExpiry {
		return false
	}
	if this.MaxSilencedExpiryAllowed != that1.MaxSilencedExpiryAllowed {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type SilencedFace interface {
	Proto() github_com_golang_protobuf_proto.Message
	GetObjectMeta() ObjectMeta
	GetExpire() int64
	GetExpireOnResolve() bool
	GetCreator() string
	GetCheck() string
	GetReason() string
	GetSubscription() string
	GetBegin() int64
	GetExpireAt() int64
	GetDefaultSilencedExpiry() int64
	GetMaxSilencedExpiryAllowed() int64
}

func (this *Silenced) Proto() github_com_golang_protobuf_proto.Message {
	return this
}

func (this *Silenced) TestProto() github_com_golang_protobuf_proto.Message {
	return NewSilencedFromFace(this)
}

func (this *Silenced) GetObjectMeta() ObjectMeta {
	return this.ObjectMeta
}

func (this *Silenced) GetExpire() int64 {
	return this.Expire
}

func (this *Silenced) GetExpireOnResolve() bool {
	return this.ExpireOnResolve
}

func (this *Silenced) GetCreator() string {
	return this.Creator
}

func (this *Silenced) GetCheck() string {
	return this.Check
}

func (this *Silenced) GetReason() string {
	return this.Reason
}

func (this *Silenced) GetSubscription() string {
	return this.Subscription
}

func (this *Silenced) GetBegin() int64 {
	return this.Begin
}

func (this *Silenced) GetExpireAt() int64 {
	return this.ExpireAt
}

func (this *Silenced) GetDefaultSilencedExpiry() int64 {
	return this.DefaultSilencedExpiry
}

func (this *Silenced) GetMaxSilencedExpiryAllowed() int64 {
	return this.MaxSilencedExpiryAllowed
}

func NewSilencedFromFace(that SilencedFace) *Silenced {
	this := &Silenced{}
	this.ObjectMeta = that.GetObjectMeta()
	this.Expire = that.GetExpire()
	this.ExpireOnResolve = that.GetExpireOnResolve()
	this.Creator = that.GetCreator()
	this.Check = that.GetCheck()
	this.Reason = that.GetReason()
	this.Subscription = that.GetSubscription()
	this.Begin = that.GetBegin()
	this.ExpireAt = that.GetExpireAt()
	this.DefaultSilencedExpiry = that.GetDefaultSilencedExpiry()
	this.MaxSilencedExpiryAllowed = that.GetMaxSilencedExpiryAllowed()
	return this
}

func (m *Silenced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovSilenced(uint64(l))
	if m.Expire != 0 {
		n += 1 + sovSilenced(uint64(m.Expire))
	}
	if m.ExpireOnResolve {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	l = len(m.Check)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	l = len(m.Subscription)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	if m.Begin != 0 {
		n += 1 + sovSilenced(uint64(m.Begin))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovSilenced(uint64(m.ExpireAt))
	}
	if m.DefaultSilencedExpiry != 0 {
		n += 1 + sovSilenced(uint64(m.DefaultSilencedExpiry))
	}
	if m.MaxSilencedExpiryAllowed != 0 {
		n += 1 + sovSilenced(uint64(m.MaxSilencedExpiryAllowed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSilenced(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSilenced(x uint64) (n int) {
	return sovSilenced(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Silenced) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSilenced
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Silenced: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Silenced: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSilenced
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireOnResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpireOnResolve = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSilenced
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSilenced
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Check = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSilenced
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSilenced
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSilencedExpiry", wireType)
			}
			m.DefaultSilencedExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultSilencedExpiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSilencedExpiryAllowed", wireType)
			}
			m.MaxSilencedExpiryAllowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSilencedExpiryAllowed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSilenced(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSilenced
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSilenced(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSilenced
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSilenced
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSilenced
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSilenced
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSilenced        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSilenced          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSilenced = fmt.Errorf("proto: unexpected end of group")
)
