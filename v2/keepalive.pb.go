// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/sensu/core/v2/keepalive.proto

package v2

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A KeepaliveRecord is a tuple of an entity name and the time at which the
// entity's keepalive will next expire.
type KeepaliveRecord struct {
	// Metadata contains the name (of the entity), and namespace, labels and
	// annotations of the keepalive record
	ObjectMeta           `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	Time                 int64    `protobuf:"varint,4,opt,name=time,proto3" json:"time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeepaliveRecord) Reset()         { *m = KeepaliveRecord{} }
func (m *KeepaliveRecord) String() string { return proto.CompactTextString(m) }
func (*KeepaliveRecord) ProtoMessage()    {}
func (*KeepaliveRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_71ca8de52c269641, []int{0}
}
func (m *KeepaliveRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeepaliveRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeepaliveRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeepaliveRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepaliveRecord.Merge(m, src)
}
func (m *KeepaliveRecord) XXX_Size() int {
	return m.Size()
}
func (m *KeepaliveRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepaliveRecord.DiscardUnknown(m)
}

var xxx_messageInfo_KeepaliveRecord proto.InternalMessageInfo

func init() {
	proto.RegisterType((*KeepaliveRecord)(nil), "sensu.core.v2.KeepaliveRecord")
}

func init() {
	proto.RegisterFile("github.com/sensu/core/v2/keepalive.proto", fileDescriptor_71ca8de52c269641)
}

var fileDescriptor_71ca8de52c269641 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x4e, 0xcd, 0x2b, 0x2e, 0xd5, 0x4f, 0xce, 0x2f,
	0x4a, 0xd5, 0x2f, 0x33, 0xd2, 0xcf, 0x4e, 0x4d, 0x2d, 0x48, 0xcc, 0xc9, 0x2c, 0x4b, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x05, 0x4b, 0xeb, 0x81, 0xa4, 0xf5, 0xca, 0x8c, 0xa4, 0x4c,
	0x90, 0x34, 0xa6, 0xe7, 0xa7, 0xe7, 0xeb, 0x83, 0x55, 0x25, 0x95, 0xa6, 0x39, 0x94, 0x19, 0xea,
	0x19, 0xeb, 0x19, 0x81, 0x05, 0xc1, 0x62, 0x60, 0x16, 0xc4, 0x10, 0x29, 0x65, 0x9c, 0xd6, 0xe5,
	0xa6, 0x96, 0x24, 0x42, 0x14, 0x29, 0x4d, 0x60, 0xe4, 0xe2, 0xf7, 0x86, 0xd9, 0x1e, 0x94, 0x9a,
	0x9c, 0x5f, 0x94, 0x22, 0x14, 0xca, 0xc5, 0x01, 0x52, 0x91, 0x92, 0x58, 0x92, 0x28, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa9, 0x87, 0xe2, 0x20, 0x3d, 0xff, 0xa4, 0xac, 0xd4, 0xe4, 0x12,
	0xdf, 0xd4, 0x92, 0x44, 0x27, 0xb9, 0x13, 0xf7, 0xe4, 0x19, 0x2e, 0xdc, 0x93, 0x67, 0x7c, 0x75,
	0x4f, 0x5e, 0x08, 0xa6, 0x4d, 0x27, 0x3f, 0x37, 0xb3, 0x24, 0x35, 0xb7, 0xa0, 0xa4, 0x32, 0x08,
	0x6e, 0x94, 0x90, 0x0c, 0x17, 0x4b, 0x49, 0x66, 0x6e, 0xaa, 0x04, 0x8b, 0x02, 0xa3, 0x06, 0xb3,
	0x13, 0xc7, 0xab, 0x7b, 0xf2, 0x60, 0x7e, 0x10, 0x98, 0xb4, 0xe2, 0xe8, 0x58, 0x20, 0xcf, 0xb0,
	0x62, 0x81, 0x3c, 0xa3, 0x93, 0xc2, 0x8f, 0x87, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0xee, 0x78,
	0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce,
	0x78, 0x2c, 0xc7, 0x10, 0xc5, 0x54, 0x66, 0x94, 0xc4, 0x06, 0x76, 0xbb, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xee, 0x92, 0x6e, 0xb0, 0x51, 0x01, 0x00, 0x00,
}

func (m *KeepaliveRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeepaliveRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeepaliveRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintKeepalive(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintKeepalive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintKeepalive(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeepalive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedKeepaliveRecord(r randyKeepalive, easy bool) *KeepaliveRecord {
	this := &KeepaliveRecord{}
	v1 := NewPopulatedObjectMeta(r, easy)
	this.ObjectMeta = *v1
	this.Time = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Time *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedKeepalive(r, 5)
	}
	return this
}

type randyKeepalive interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKeepalive(r randyKeepalive) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKeepalive(r randyKeepalive) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneKeepalive(r)
	}
	return string(tmps)
}
func randUnrecognizedKeepalive(r randyKeepalive, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldKeepalive(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldKeepalive(dAtA []byte, r randyKeepalive, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateKeepalive(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateKeepalive(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateKeepalive(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateKeepalive(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateKeepalive(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateKeepalive(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateKeepalive(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *KeepaliveRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeepaliveRecord)
	if !ok {
		that2, ok := that.(KeepaliveRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectMeta.Equal(&that1.ObjectMeta) {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type KeepaliveRecordFace interface {
	Proto() github_com_golang_protobuf_proto.Message
	GetObjectMeta() ObjectMeta
	GetTime() int64
}

func (this *KeepaliveRecord) Proto() github_com_golang_protobuf_proto.Message {
	return this
}

func (this *KeepaliveRecord) TestProto() github_com_golang_protobuf_proto.Message {
	return NewKeepaliveRecordFromFace(this)
}

func (this *KeepaliveRecord) GetObjectMeta() ObjectMeta {
	return this.ObjectMeta
}

func (this *KeepaliveRecord) GetTime() int64 {
	return this.Time
}

func NewKeepaliveRecordFromFace(that KeepaliveRecordFace) *KeepaliveRecord {
	this := &KeepaliveRecord{}
	this.ObjectMeta = that.GetObjectMeta()
	this.Time = that.GetTime()
	return this
}

func (m *KeepaliveRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovKeepalive(uint64(l))
	if m.Time != 0 {
		n += 1 + sovKeepalive(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovKeepalive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeepalive(x uint64) (n int) {
	return sovKeepalive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeepaliveRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeepalive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeepaliveRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeepaliveRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeepalive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeepalive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeepalive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeepalive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeepalive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeepalive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeepalive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeepalive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeepalive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeepalive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeepalive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeepalive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeepalive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeepalive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeepalive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeepalive = fmt.Errorf("proto: unexpected end of group")
)
