// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/sensu/core/v2/fallback_pipeline.proto

package v2

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FallbackPipeline represents a named collection of pipeline workflows.
type FallbackPipeline struct {
	// Metadata contains the name, namespace, labels and annotations of the
	// fallback pipelines.
	ObjectMeta `protobuf:"bytes,1,opt,name=Metadata,proto3,embedded=Metadata" json:"metadata,omitempty"`
	// Pipelines contains one or more fallback pipelines.
	Pipelines            []*ResourceReference `protobuf:"bytes,2,rep,name=pipelines,proto3" json:"pipelines" yaml: "pipelines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FallbackPipeline) Reset()         { *m = FallbackPipeline{} }
func (m *FallbackPipeline) String() string { return proto.CompactTextString(m) }
func (*FallbackPipeline) ProtoMessage()    {}
func (*FallbackPipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_f357d47f834a6bf1, []int{0}
}
func (m *FallbackPipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FallbackPipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FallbackPipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FallbackPipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FallbackPipeline.Merge(m, src)
}
func (m *FallbackPipeline) XXX_Size() int {
	return m.Size()
}
func (m *FallbackPipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_FallbackPipeline.DiscardUnknown(m)
}

var xxx_messageInfo_FallbackPipeline proto.InternalMessageInfo

func (m *FallbackPipeline) GetPipelines() []*ResourceReference {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

func init() {
	proto.RegisterType((*FallbackPipeline)(nil), "sensu.core.v2.FallbackPipeline")
}

func init() {
	proto.RegisterFile("github.com/sensu/core/v2/fallback_pipeline.proto", fileDescriptor_f357d47f834a6bf1)
}

var fileDescriptor_f357d47f834a6bf1 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x4e, 0xcd, 0x2b, 0x2e, 0xd5, 0x4f, 0xce, 0x2f,
	0x4a, 0xd5, 0x2f, 0x33, 0xd2, 0x4f, 0x4b, 0xcc, 0xc9, 0x49, 0x4a, 0x4c, 0xce, 0x8e, 0x2f, 0xc8,
	0x2c, 0x48, 0xcd, 0xc9, 0xcc, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x05, 0x2b,
	0xd3, 0x03, 0x29, 0xd3, 0x2b, 0x33, 0x92, 0x32, 0x41, 0x32, 0x20, 0x3d, 0x3f, 0x3d, 0x5f, 0x1f,
	0xac, 0x2a, 0xa9, 0x34, 0xcd, 0xa1, 0xcc, 0x50, 0xcf, 0x58, 0xcf, 0x08, 0x2c, 0x08, 0x16, 0x03,
	0xb3, 0x20, 0x86, 0x48, 0x29, 0xe3, 0xb4, 0x36, 0x37, 0xb5, 0x24, 0x11, 0xaa, 0xc8, 0x10, 0xa7,
	0xa2, 0xa2, 0xd4, 0xe2, 0xfc, 0xd2, 0xa2, 0xe4, 0xd4, 0xf8, 0xa2, 0xd4, 0xb4, 0xd4, 0xa2, 0xd4,
	0xbc, 0x64, 0xa8, 0xe3, 0x94, 0xae, 0x33, 0x72, 0x09, 0xb8, 0x41, 0x1d, 0x1e, 0x00, 0x75, 0xb7,
	0x50, 0x28, 0x17, 0x87, 0x6f, 0x6a, 0x49, 0x62, 0x4a, 0x62, 0x49, 0xa2, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0xb7, 0x91, 0xa4, 0x1e, 0x8a, 0x27, 0xf4, 0xfc, 0x93, 0xb2, 0x52, 0x93, 0x4b, 0x40, 0x8a,
	0x9c, 0xe4, 0x4e, 0xdc, 0x93, 0x67, 0xb8, 0x70, 0x4f, 0x9e, 0xf1, 0xd5, 0x3d, 0x79, 0xa1, 0x5c,
	0xa8, 0x36, 0x9d, 0xfc, 0xdc, 0xcc, 0x92, 0xd4, 0xdc, 0x82, 0x92, 0xca, 0x20, 0xb8, 0x51, 0x42,
	0x39, 0x5c, 0x9c, 0xb0, 0xa0, 0x29, 0x96, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x36, 0x52, 0x40, 0x33,
	0x37, 0x08, 0xea, 0xce, 0x20, 0x98, 0x33, 0x9d, 0x74, 0x5e, 0xdd, 0x93, 0x47, 0x68, 0xfb, 0x74,
	0x4f, 0x5e, 0xba, 0x32, 0x31, 0x37, 0xc7, 0x4a, 0x41, 0x09, 0x2e, 0x86, 0xb0, 0x4b, 0x29, 0x08,
	0xa1, 0xd2, 0x49, 0xe1, 0xc7, 0x43, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x77, 0x3c, 0x92, 0x63,
	0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96,
	0x63, 0x88, 0x62, 0x2a, 0x33, 0x4a, 0x62, 0x03, 0x07, 0x81, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x7f, 0x3d, 0xa9, 0x94, 0xd3, 0x01, 0x00, 0x00,
}

func (m *FallbackPipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FallbackPipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FallbackPipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pipelines) > 0 {
		for iNdEx := len(m.Pipelines) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pipelines[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFallbackPipeline(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFallbackPipeline(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintFallbackPipeline(dAtA []byte, offset int, v uint64) int {
	offset -= sovFallbackPipeline(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedFallbackPipeline(r randyFallbackPipeline, easy bool) *FallbackPipeline {
	this := &FallbackPipeline{}
	v1 := NewPopulatedObjectMeta(r, easy)
	this.ObjectMeta = *v1
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Pipelines = make([]*ResourceReference, v2)
		for i := 0; i < v2; i++ {
			this.Pipelines[i] = NewPopulatedResourceReference(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedFallbackPipeline(r, 3)
	}
	return this
}

type randyFallbackPipeline interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneFallbackPipeline(r randyFallbackPipeline) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringFallbackPipeline(r randyFallbackPipeline) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneFallbackPipeline(r)
	}
	return string(tmps)
}
func randUnrecognizedFallbackPipeline(r randyFallbackPipeline, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldFallbackPipeline(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldFallbackPipeline(dAtA []byte, r randyFallbackPipeline, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateFallbackPipeline(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateFallbackPipeline(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateFallbackPipeline(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateFallbackPipeline(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateFallbackPipeline(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateFallbackPipeline(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateFallbackPipeline(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *FallbackPipeline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FallbackPipeline)
	if !ok {
		that2, ok := that.(FallbackPipeline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectMeta.Equal(&that1.ObjectMeta) {
		return false
	}
	if len(this.Pipelines) != len(that1.Pipelines) {
		return false
	}
	for i := range this.Pipelines {
		if !this.Pipelines[i].Equal(that1.Pipelines[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *FallbackPipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovFallbackPipeline(uint64(l))
	if len(m.Pipelines) > 0 {
		for _, e := range m.Pipelines {
			l = e.Size()
			n += 1 + l + sovFallbackPipeline(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFallbackPipeline(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFallbackPipeline(x uint64) (n int) {
	return sovFallbackPipeline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FallbackPipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFallbackPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FallbackPipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FallbackPipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFallbackPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFallbackPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFallbackPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipelines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFallbackPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFallbackPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFallbackPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipelines = append(m.Pipelines, &ResourceReference{})
			if err := m.Pipelines[len(m.Pipelines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFallbackPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFallbackPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFallbackPipeline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFallbackPipeline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFallbackPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFallbackPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFallbackPipeline
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFallbackPipeline
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFallbackPipeline
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFallbackPipeline        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFallbackPipeline          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFallbackPipeline = fmt.Errorf("proto: unexpected end of group")
)
